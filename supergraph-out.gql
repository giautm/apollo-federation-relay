schema
  @core(feature: "https://specs.apollo.dev/core/v0.2")
  @core(feature: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @core(feature: String!, as: String, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

enum core__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar join__FieldSet

enum join__Graph {
  NODE_SERVICE @join__graph(name: "NODE_SERVICE", url: "")
  ___REVIEW @join__graph(name: "ðŸ†’ review", url: "http://localhost:8002/")
  ___PRODUCT @join__graph(name: "ðŸ“¦ product", url: "http://localhost:8001/")
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @join__type(graph: NODE_SERVICE)
  @join__type(graph: ___REVIEW)
  @join__type(graph: ___PRODUCT)
{
  id: ID!
}

type PageInfo
  @join__type(graph: ___REVIEW)
  @join__type(graph: ___PRODUCT)
{
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product implements Node
  @join__implements(graph: NODE_SERVICE, interface: "Node")
  @join__implements(graph: ___REVIEW, interface: "Node")
  @join__implements(graph: ___PRODUCT, interface: "Node")
  @join__type(graph: NODE_SERVICE, key: "id", extension: true)
  @join__type(graph: ___REVIEW, key: "id", extension: true)
  @join__type(graph: ___PRODUCT, key: "id")
{
  id: ID!
  reviews(after: String, first: Int, before: String, last: Int): ReviewConnection @join__field(graph: ___REVIEW)
  name: String! @join__field(graph: ___PRODUCT)
  related(after: String, first: Int, before: String, last: Int): ProductConnection @join__field(graph: ___PRODUCT)
}

type ProductConnection
  @join__type(graph: ___PRODUCT)
{
  pageInfo: PageInfo!
  edges: [ProductEdge]
}

type ProductEdge
  @join__type(graph: ___PRODUCT)
{
  node: Product
  cursor: String!
}

type Query
  @join__type(graph: NODE_SERVICE)
  @join__type(graph: ___REVIEW)
  @join__type(graph: ___PRODUCT)
{
  node(id: ID!): Node @join__field(graph: NODE_SERVICE)
  review(id: ID!): Review @join__field(graph: ___REVIEW)
  reviews(ids: [ID!]): [Review] @join__field(graph: ___REVIEW)
  product(id: ID!): Product @join__field(graph: ___PRODUCT)
  products(ids: [ID!]): [Product] @join__field(graph: ___PRODUCT)
}

type Review implements Node
  @join__implements(graph: NODE_SERVICE, interface: "Node")
  @join__implements(graph: ___REVIEW, interface: "Node")
  @join__type(graph: NODE_SERVICE, key: "id", extension: true)
  @join__type(graph: ___REVIEW, key: "id")
{
  id: ID!
  body: String! @join__field(graph: ___REVIEW)
  rating: Int @join__field(graph: ___REVIEW)
  node: Node @join__field(graph: ___REVIEW)
}

type ReviewConnection
  @join__type(graph: ___REVIEW)
{
  pageInfo: PageInfo!
  edges: [ReviewEdge]
}

type ReviewEdge
  @join__type(graph: ___REVIEW)
{
  node: Review
  cursor: String!
}